Quick notes on Kotlin from Udemy

CREATING A VARIABLE

var string = "hello"

val string = "Hi"

The difference between 'var' & 'val' is that val is immutable i.e. the val act as final from java and its value cannot be changed over time.
If you know that any variable value will change in future then declare it as 'var' instead of 'val'.
On the other hand if you want to declare any constant like pi i.e. 3.1415 and so on then declare it as 'val' since its value is probably not going to change any time in future.

VARIABLES: 
By default kotlin will save the numeric value as Integer or double
e.g.
		var x = 2 	- Integer
		var x = 2.34 	- Double
	If you need to save the values as long or float then what you have to do is declare them explicitly with those datatypes
		var x: Long = 2 	- Long
		var x: Float = 2.34f	-Float 

If you need to store other datatypes like float, long, etc then those should be declared explicitly.
e.g.
	var x: Long = 2348723462
	or
	var x: Float = 4.45f
		Here the f is appended at the end of the float value since kotlin will consider the value as double by default when it encounter any values after decimal point

To covert from one datatype to other datatype you can use methods like toShort(), toLong(), etc
e.g.
	var i: Int = 2
	var f: Float = 3.34f
	var d: Double = 2.23

	to convert f to the near int value use f.toInt()
	or
	to convert f to the near double value use f.toDouble()


we can create list in kotlin using
listOf(1,3,5,7) will give [1,3,5,7]


NULLABLE VARIABLE:

Kotlin avoids the null pointer exception by avoiding the null allocation in the first place.
that means unlike java you cannot assign null to a variable directly.
e.g In java you can do something like
	String name = null;

	In kotlin 
	var str: String = null
		IS NOT ALLOWED

With this you can create a name string that do not contain anything till you put something in it like 
	name = "Max"

If the name string is null you cannot call methods of the string over it, such as 
	name.length

Now what kotlin support is you can actually define a variable as nullble variable so that you can put null value in it
So we can define a variable as nullable variable by simply putting a ? after the datatype of the variable is been declared in kotlin
e.g.
	var str: String? = null

with this now we have defined the variable 'str' as nullable variable

So we can call methods on the variable 'str' as
	str?.length

This suggest kotlin that the str can be nullable and now its length can be calculated 
If the str contains null at the moment the above code will compile and give output as 'null'

So lets update the value of the str as
	str = "Hello my name is ***" 

At this time if you want to run the length method again then this time it will give you the new length of the string 'str'
e.g. str?.length

We can override nullable variable properties by sayin such as 
str!!.length

This means that the user is sure that the value of 'str' is not null and kotlin should proceed and calculate the length of the string 
YET THIS MIGHT GIVE YOU THE NULLPOINTEREXCEPTION in case your value is null at the moment.

DECLARING NULLABLE VARIABLE :	var str: String? = "Hello"

SAFE CALL TO A METHOD :		str?.length()

UNSAFE CALL :	str!!.length()


CONDTIONAL STATEMENTS:
	You can either use if statements or when statements to use conditional approach
	e.g.
		if(age < 21){
			doSomething
		}

		val mode: Int = 3
		when(mode){
			1 -> doSomething
			2 -> {
				doSomthingElse
			}
			3 -> doSomethingDifferent
			else -> {
				doSomethingForRestOfTheCases
			}
		}

NOTE : when is similiar to switch statement in Java provided that we don't need to declare break after each case in kotlin as break is implicit in kotlin

CONDITIONAL EXPRESSIONS: 
	For these you have to return the result in any value like
		val mode: Int = 3
		val result = when(mode){
			1 -> "One"
			2 -> {
				"Two"
			}
			3 -> "Three"
			else -> {
				"Not one two or three"
			}

			println(result)
		}