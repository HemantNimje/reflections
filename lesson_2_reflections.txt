1. What happens when you initialize a repository? Why do you need to do it?

Whenever you initialize a repository a new repository will be created. All the content inside the repository folder is pushed to the git. 
By creating a new repository for a project we can commit the changes during the development process to perform version-control.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?

Working directory is the directory where your files for the current project/task resides and your current changes are in current directory before commit.

The staging area lets you choose the file before you make a commit.
In this you can add one or more files at a time.
The files put in the staging area are ready for the commit but not put on the git until commit is made.
Using git add you can push your file to the staging area.

Repository is for the git, where you can commit your files which further will be useful for version-control.
Once you commit the changes using git commit the changes are pushed to the git repository

git diff : to find the difference between a file at working directory and staging area
git diff --staged : to find the difference between a file at staging area and repository

3. How can you use the staging area to make sure you have one commit per logical change?

For each logical change we can push the changes to the staging area and then we can make the final commit to push the changes to the respository.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If we want to try some experimental function on our main code we might crash the main code by that experimental function code.
In that sense we need to fix the main code first and then need to add that experimental function again.
This is mostly can be seen if we have any working software and we need to add new functionality.
We cannot afford breaking the working software in order to add new functionality.
At this time the concept of branches comes in handy. We can create a branch of the main code which will be the exact replica of the main code.
We can improve and test the branch to check whether adding the new functionality break the working software or not. Meanwhile the software is operational since we are not doing any changes directly on the main branch. Once the new functionality is tested to be working aginst the branch code we can proceed and merge it with the main code.

5. How do the diagrams help you visualize the branch structure?
Using the diagrams we can tell which is the flow of commits (most recent to least recent) for any branch.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
By merging two branches we merge the one branch to the other branch so that new functionality code changes are now added to the main code. As we merge the branch now we no longer need it. So we can delete the branch title and with git log we can log all the commits in the main branch as well as the sub branch which will return the log according to the timestamp, i.e. from most latest to the least latest.